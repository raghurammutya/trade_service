name: Trade Service CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_DB: trade_service_test
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_pass
  REDIS_URL: redis://localhost:6379/1

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        pip install -r requirements.txt
        
    - name: Run Black (code formatting)
      run: black --check --diff .
      
    - name: Run isort (import sorting)
      run: isort --check-only --diff .
      
    - name: Run flake8 (linting)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Run mypy (type checking)
      run: mypy app/ --ignore-missing-imports
      
    - name: Run bandit (security)
      run: bandit -r app/ -f json -o bandit-report.json
      
    - name: Run safety (dependency security)
      run: safety check --json --output safety-report.json
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test:
    runs-on: ubuntu-latest
    name: Tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        test-type: [unit, integration, api]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-test-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-test-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt
        
    - name: Set up test database
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
      run: |
        python -c "
        from shared_architecture.db.database import Base, engine
        Base.metadata.create_all(bind=engine)
        print('Test database tables created successfully')
        "
        
    - name: Run ${{ matrix.test-type }} tests
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        REDIS_URL: ${{ env.REDIS_URL }}
        ENVIRONMENT: test
      run: |
        case "${{ matrix.test-type }}" in
          "unit")
            pytest tests/unit/ -v --cov=app --cov-report=xml:coverage-unit.xml --junitxml=test-results-unit.xml -m "unit and not slow"
            ;;
          "integration") 
            pytest tests/integration/ -v --cov=app --cov-report=xml:coverage-integration.xml --junitxml=test-results-integration.xml -m "integration"
            ;;
          "api")
            pytest tests/api/ -v --cov=app --cov-report=xml:coverage-api.xml --junitxml=test-results-api.xml -m "api"
            ;;
        esac
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          test-results-*.xml
          coverage-*.xml
          htmlcov/
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: coverage-${{ matrix.test-type }}.xml
        flags: ${{ matrix.test-type }}
        name: codecov-${{ matrix.test-type }}

  performance:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt
        pip install locust pytest-benchmark
        
    - name: Set up test database
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
      run: |
        python -c "
        from shared_architecture.db.database import Base, engine
        Base.metadata.create_all(bind=engine)
        print('Test database tables created successfully')
        "
        
    - name: Run performance tests
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        REDIS_URL: ${{ env.REDIS_URL }}
        ENVIRONMENT: test
      run: |
        pytest tests/ -v -m "performance" --benchmark-json=benchmark-results.json
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: benchmark-results.json

  smoke:
    runs-on: ubuntu-latest
    name: Smoke Tests
    needs: [lint, test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt
        
    - name: Set up test database
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
      run: |
        python -c "
        from shared_architecture.db.database import Base, engine
        Base.metadata.create_all(bind=engine)
        print('Test database tables created successfully')
        "
        
    - name: Run smoke tests
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        REDIS_URL: ${{ env.REDIS_URL }}
        ENVIRONMENT: test
      run: |
        pytest tests/ -v -m "smoke" --tb=short --maxfail=1
        
    - name: Health check endpoints
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        REDIS_URL: ${{ env.REDIS_URL }}
      run: |
        # Start the service in background
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        
        # Wait for service to start
        sleep 10
        
        # Test health endpoints
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/health/detailed || exit 1
        
        echo "Smoke tests passed successfully!"

  security:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run security tests
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test_requirements.txt
        pytest tests/ -v -m "security" --tb=short

  build:
    runs-on: ubuntu-latest
    name: Build & Package
    needs: [lint, test, smoke]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        
    - name: Build package
      run: |
        python -m build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [build, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment steps here
        
    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment verification..."
        # Add post-deployment test steps here